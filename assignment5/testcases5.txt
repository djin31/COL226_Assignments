%variables
hastype([(variable("X"),intT),(variable("Y"),intT)],variable("X"),T).
hastype([(variable("X"),boolT),(variable("X"),intT)],variable("X"),T).

%Constants
hastype([],-652,T).
hastype([],true,T).

%arithmetic
hastype([],add(sub(2,5), div(6,mul(2,5))),T).

%boolean
hastype([(variable("X"),boolT)],and(or(or(variable("X"), false), true),or(variable("X"), true)),T).

%comparison
hastype([(variable("X"),boolT),(variable("Y"),boolT)],or(and(greater(-2, 6), less(3,100)),or(equals(5, variable("Y")), variable("X"))),T).
hastype([],less(1,2),T).

%equality
hastype([],equals(tup([tup([1,3]),true]),tup([1, 3,true])),T).

%if then else
hastype([(variable("X"),boolT),(variable("Y"),intT)],if_else(and(variable("X"),greater(variable("Y"),0)),variable("Y"),variable("X")),T).

%let d in e
hastype([(variable("Y"),intT)],let_in_end(def(variable("X"),3),add(variable("Y"),variable("X"))),T).
hastype([(variable(x),intT)],let_in_end(def(variable(y),3),mul(variable(y),5)),T).

%abstraction
hastype( [(variable(x), boolT), (variable(w), boolT)], lambda(variable(x), variable(w)), arrowT(boolT, boolT)). 
hastype( [(variable(x), typeVar(boolT)), (variable(w), typeVar(boolT))], lambda(variable(x), variable(w)), arrowT(typeVar(boolT), typeVar(boolT))). 

%application
hastype([(variable(r), arrowT(typeVar(boolT),typeVar(boolT))), (variable(s), typeVar(boolT))], apply(variable(r), variable(s)), typeVar(boolT)).

hastype([(variable(r), arrowT(typeVar(boolT),typeVar(boolT))), (variable(s), typeVar(boolT)), (variable(s), typeVar(boolT)), (variable(r), arrowT(typeVar(boolT),typeVar(boolT)))], apply(variable(r), variable(s)), X).


%n-tuple
hastype([(variable(x), boolT), (variable(w), boolT)], tup([variable(x), variable(w), and(variable(x), variable(y))]), tupType([boolT, boolT,boolT])).
hastype([(variable(x), boolT), (variable(w), boolT)], tup([variable(x), variable(w), and(variable(x), variable(w))]), tupType([boolT, boolT,boolT])).


%projection
hastype([(variable(y), boolT), (variable(z), boolT)], proj(1,tup([variable(x), variable(w), and(variable(x), variable(y))])), boolT).%w not defined

%constructors
hastype([(variable(r), boolT)] ,variable(r), boolT).
hastype([(variable(r), boolT)] ,variable(r), X).
hastype([(variable(r), boolT)] ,variable(r), boolT).


%type elaborates

typeElaborates([],def(variable("X"),add(3,4)),T).
typeElaborates([],def(variable("Y"),true),T).
typeElaborates([],parallel(def(variable("X"),3),def(variable("Y"),true)),T).
typeElaborates([],parallel(def(variable("X"),3),def(variable("X"),true)),T).
typeElaborates([],sequential(def(variable("X"),mul(31,20)),def(variable("Y"),true)),T).
typeElaborates([(variable("X"),boolT),(variable("Y"),intT)],
				localdef(
							def(variable("X"),31),
						 	parallel(def(variable("X"),tup([variable("Y")])),def(variable("Y"),false))

						 ),T).

typeElaborates([(variable("X"),boolT),(variable("Y"),intT)],
				localdef(
							def(variable("X"),20),
						 	parallel(def(variable("X"),3),def(variable("Y"),false))

						 ),T).
typeElaborates([(variable(x),intT)],def(variable(y),9),Gamma).

typeElaborates([(variable(x),typeVar(intT))],sequential(def(variable(z),true),def(variable(y),false)),Gamma).

typeElaborates([(variable(x),intT)],parallel(def(variable(z),9),def(variable(y),0)),Gamma).

typeElaborates([(variable(x),typeVar(intT))],localdef(def(variable(z),9),def(variable(y),4)),Gamma).

typeElaborates([(variable(x),typeVar(intT))],parallel(sequential(def(variable(z),8),def(variable(y),true)),def(variable(y),false)),Gamma).

typeElaborates([(variable(x),typeVar(intT))],sequential(parallel(def(variable(z),45),def(variable(y),false)),def(variable(y),8)),Gamma).
